//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Inputs/SpectateControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SpectateControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SpectateControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SpectateControls"",
    ""maps"": [
        {
            ""name"": ""Spectate"",
            ""id"": ""93ed96d8-9ef3-4a0b-a7e2-7e55db5f759b"",
            ""actions"": [
                {
                    ""name"": ""Previous Player"",
                    ""type"": ""Button"",
                    ""id"": ""c17d621f-d3e1-482d-9b8b-3297bf9c9b63"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Next Player"",
                    ""type"": ""Button"",
                    ""id"": ""22292c29-5822-4614-b00e-175a7e5f3429"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""13c4898a-0419-4fd2-82f4-7326aecf6ba9"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Next Player"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e391b272-b27d-47a5-b97f-5f39ebd36a09"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Next Player"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bb9f130a-e7ce-401d-996f-beb10b8e1d07"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Previous Player"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d8062543-e1ed-49dd-9f4b-589cbfbb19a8"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Previous Player"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Spectate
        m_Spectate = asset.FindActionMap("Spectate", throwIfNotFound: true);
        m_Spectate_PreviousPlayer = m_Spectate.FindAction("Previous Player", throwIfNotFound: true);
        m_Spectate_NextPlayer = m_Spectate.FindAction("Next Player", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Spectate
    private readonly InputActionMap m_Spectate;
    private List<ISpectateActions> m_SpectateActionsCallbackInterfaces = new List<ISpectateActions>();
    private readonly InputAction m_Spectate_PreviousPlayer;
    private readonly InputAction m_Spectate_NextPlayer;
    public struct SpectateActions
    {
        private @SpectateControls m_Wrapper;
        public SpectateActions(@SpectateControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @PreviousPlayer => m_Wrapper.m_Spectate_PreviousPlayer;
        public InputAction @NextPlayer => m_Wrapper.m_Spectate_NextPlayer;
        public InputActionMap Get() { return m_Wrapper.m_Spectate; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SpectateActions set) { return set.Get(); }
        public void AddCallbacks(ISpectateActions instance)
        {
            if (instance == null || m_Wrapper.m_SpectateActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SpectateActionsCallbackInterfaces.Add(instance);
            @PreviousPlayer.started += instance.OnPreviousPlayer;
            @PreviousPlayer.performed += instance.OnPreviousPlayer;
            @PreviousPlayer.canceled += instance.OnPreviousPlayer;
            @NextPlayer.started += instance.OnNextPlayer;
            @NextPlayer.performed += instance.OnNextPlayer;
            @NextPlayer.canceled += instance.OnNextPlayer;
        }

        private void UnregisterCallbacks(ISpectateActions instance)
        {
            @PreviousPlayer.started -= instance.OnPreviousPlayer;
            @PreviousPlayer.performed -= instance.OnPreviousPlayer;
            @PreviousPlayer.canceled -= instance.OnPreviousPlayer;
            @NextPlayer.started -= instance.OnNextPlayer;
            @NextPlayer.performed -= instance.OnNextPlayer;
            @NextPlayer.canceled -= instance.OnNextPlayer;
        }

        public void RemoveCallbacks(ISpectateActions instance)
        {
            if (m_Wrapper.m_SpectateActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISpectateActions instance)
        {
            foreach (var item in m_Wrapper.m_SpectateActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SpectateActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SpectateActions @Spectate => new SpectateActions(this);
    public interface ISpectateActions
    {
        void OnPreviousPlayer(InputAction.CallbackContext context);
        void OnNextPlayer(InputAction.CallbackContext context);
    }
}
